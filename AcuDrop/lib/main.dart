import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:provider/provider.dart';
import 'package:acudrop/data/repositories/auth_repository_impl.dart';
import 'package:acudrop/data/repositories/user_repository_impl.dart';
import 'package:acudrop/domain/repositories/auth_repository.dart';
import 'package:acudrop/domain/repositories/user_repository.dart';
import 'package:acudrop/presentation/providers/auth_provider.dart';
import 'package:acudrop/presentation/providers/home_provider.dart';
import 'package:acudrop/presentation/providers/profile_provider.dart';
import 'package:acudrop/presentation/screens/auth_gate.dart';
import 'firebase_options.dart'; // This file is auto-generated by FlutterFire CLI

// The main function, where the app starts execution.
void min() async {
  // Ensures that Flutter's widgets are ready before running any other code.
  WidgetsFlutterBinding.ensureInitialized();
  // Initializes the connection to your Firebase project.
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  // Runs the main app widget.
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    // MultiProvider is used for Dependency Injection. It makes services
    // and state managers (providers) available to the entire widget tree below it.
    return MultiProvider(
      providers: [
        // DATA LAYER: We provide the CONCRETE implementations here.
        // When a widget asks for an `AuthRepository`, Provider will give it an `AuthRepositoryImpl`.
        Provider<AuthRepository>(create: (_) => AuthRepositoryImpl()),
        Provider<UserRepository>(create: (_) => UserRepositoryImpl()),

        // PRESENTATION LAYER: These are the state management classes (view models).
        // They depend on the repositories above them.
        ChangeNotifierProvider(
          create: (context) => AuthProvider(context.read<AuthRepository>()),
        ),
        ChangeNotifierProvider(
          create: (context) => HomeProvider(context.read<UserRepository>()),
        ),
        ChangeNotifierProvider(
          create: (context) => ProfileProvider(context.read<UserRepository>()),
        ),
      ],
      // The main app material widget.
      child: MaterialApp(
        title: 'AcuDrop',
        theme: ThemeData(
          primarySwatch: Colors.teal,
          visualDensity: VisualDensity.adaptivePlatformDensity,
          textTheme: GoogleFonts.poppinsTextTheme(
            Theme.of(context).textTheme,
          ),
          scaffoldBackgroundColor: Colors.grey[50],
        ),
        debugShowCheckedModeBanner: false,
        // The first screen the user sees. It will decide whether to show
        // the login screen or the home screen based on auth state.
        home: const AuthGate(),
      ),
    );
  }
}
